<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-4.1.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">
	<!-- 加载配置文件 -->
	
	<context:property-placeholder location="classpath:config.properties"/>
	
	
	<!-- 配置数据源 使用的是Druid数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="33" />
		<!-- 用来检测有效sql -->
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<property name="filters" value="mergeStat" />
	</bean>
	
	<!-- 配置hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 注入数据源 相关信息看源码 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置映射文件 -->
		<!-- <property name="mappingResources">
				<list>
						<value>com/hahachiu/ssPanel/entity/Order.hbm.xml</value>
						<value>com/hahachiu/ssPanel/entity/User.hbm.xml</value>
						<value>com/hahachiu/ssPanel/entity/OrderItem.hbm.xml</value>
						<value>com/hahachiu/ssPanel/entity/Node.hbm.xml</value>
						<value>com/hahachiu/ssPanel/entity/Plan.hbm.xml</value>
						<value>com/hahachiu/ssPanel/entity/Log.hbm.xml</value>
						<value>com/hahachiu/ssPanel/entity/ChargeOrder.hbm.xml</value>
				</list>
		</property> -->
		<!-- hibernate配置信息 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
			</props>
		</property>
		<!-- 扫描hibernate注解配置的entity -->
		<property name="packagesToScan" value="com.hahachiu.ssPanel.entity" />
	</bean>
	
	
	<!-- 用户管理的Dao,Service,Action -->	
	<bean id="userDao" class="com.hahachiu.ssPanel.dao.impl.UserDaoHibernateImpl">
	    <property name="sessionFactory" ref="sessionFactory"/>
	</bean>	
	<!-- UserService 用户操作的业务对象 -->	
	<bean id="userService" class="com.hahachiu.ssPanel.service.impl.UserServiceImpl">
	    <property name="dao" ref="userDao"/>
	</bean>	
	<!-- UserAction 用户操作的控制器对象 -->
	<bean id="userAction" class="com.hahachiu.ssPanel.action.UserAction" scope="prototype">
	    <property name="service" ref="userService"/>
	    <property name="model" ref="userModel"/>
	</bean>
	<bean id="userModel" class="com.hahachiu.ssPanel.entity.User" scope="prototype"/>
	
	<!-- 节点管理的Dao,Service,Action -->
	<bean id="nodeDao" class="com.hahachiu.ssPanel.dao.impl.NodeDaoHibernateImpl" >
	  <property name="sessionFactory" ref="sessionFactory"/>
	</bean>	
	<bean id="nodeService" class="com.hahachiu.ssPanel.service.impl.NodeServiceImpl">
	  <property name="dao" ref="nodeDao"/>
	</bean>	
	<bean id="nodeAction" class="com.hahachiu.ssPanel.action.NodeAction" scope="prototype">
	  <property name="service" ref="NodeService"/>
	</bean>
	
	<!-- 充值订单管理的Dao,Service,Action -->
	<bean id="chargeOrderDao" class="com.hahachiu.ssPanel.dao.impl.ChargeOrderDaoHibernateImpl" >
	  <property name="sessionFactory" ref="sessionFactory"/>
	</bean>	
	<bean id="chargeOrderService" class="com.hahachiu.ssPanel.service.impl.ChargeOrderServiceImpl">
	  <property name="dao" ref="chargeOrderDao"/>
	</bean>	
	<bean id="chargeOrderAction" class="com.hahachiu.ssPanel.action.ChargeOrderAction" scope="prototype">
	  <property name="service" ref="chargeOrderService"/>
	</bean>
	
	<!-- 日志管理的Dao,Service,Action -->
	<bean id="logDao" class="com.hahachiu.ssPanel.dao.impl.LogDaoHibernateImpl" >
	  <property name="sessionFactory" ref="sessionFactory"/>
	</bean>	
	<bean id="logService" class="com.hahachiu.ssPanel.service.impl.LogServiceImpl">
	  <property name="dao" ref="logDao"/>
	</bean>	
	<bean id="logAction" class="com.hahachiu.ssPanel.action.LogAction" scope="prototype">
	  <property name="service" ref="logService"/>
	</bean>
	
	<!-- 计划管理的Dao,Service,Action -->
	<bean id="planDao" class="com.hahachiu.ssPanel.dao.impl.PlanDaoHibernateImpl">
	  <property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="planService" class="com.hahachiu.ssPanel.service.impl.PlanServiceImpl">
	  <property name="dao" ref="planDao"/>
	</bean>
	<bean id="planAction" class="com.hahachiu.ssPanel.action.PlanAction" scope="prototype">
	  <property name="service" ref="planService"/>
	</bean>
	
	<!-- 订单管理的Dao,Service -->
	<bean id="orderDao" class="com.hahachiu.ssPanel.dao.impl.OrderDaoHibernateImpl">
	  <property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="orderService" class="com.hahachiu.ssPanel.service.impl.OrderServiceImpl">
	  <property name="dao" ref="orderDao"/>
	</bean>
	
	<!-- 计划管理的Dao,Service,Action -->
	<bean id="orderItemDao" class="com.hahachiu.ssPanel.dao.impl.OrderItemDaoHibernateImpl">
	  <property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="orderItemService" class="com.hahachiu.ssPanel.service.impl.OrderItemServiceImpl">
	  <property name="dao" ref="orderItemDao"/>
	</bean>
	<bean id="orderItemAction" class="com.hahachiu.ssPanel.action.OrderItemAction" scope="prototype">
	  <property name="service" ref="orderItemService"/>
	</bean>
	
	<!-- 购买与结算的Action -->
	<bean id="shoppingAction" class="com.hahachiu.ssPanel.action.ShoppingAction" scope="prototype">
	  <property name="planService" ref="planService"/>
	  <property name="service" ref="orderService"/>
	</bean>
	
	
	
	
	
	

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务增强处理Bean，指定事务管理器 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<!-- 配置详细事务处理语义 -->
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />

			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="load*" propagation="SUPPORTS" read-only="true" />

			<!-- 其他采用默认事务方式 -->
			<tx:method name="*" />

		</tx:attributes>
	</tx:advice>
	
	<!-- Spring aop事务管理 -->
	<aop:config>
		<!-- 配置切入点 -->
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.hahachiu.ssPanel.service.impl.*Impl.*(..))" />
		<!-- 指定在txAdvice切入点应用txAdvice事务增强处理 -->
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>


	
</beans>